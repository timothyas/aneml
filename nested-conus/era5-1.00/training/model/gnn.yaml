activation: GELU
num_channels: 512
cpu_offload: False
output_mask: null

model:
  _target_: anemoi.models.models.encoder_processor_decoder.AnemoiModelEncProcDec


layer_kernels:
    LayerNorm:
      _target_: anemoi.models.layers.normalization.AutocastLayerNorm
      _partial_: True
      #Any arguments to your chosen function go here e.g.
    Linear:
      _target_: torch.nn.Linear
      _partial_: True
      #Any arguments to your chosen function go here e.g.

processor:
  _target_: anemoi.models.layers.processor.GNNProcessor
  activation: ${model.activation}
  trainable_size: ${model.trainable_parameters.hidden2hidden}
  sub_graph_edge_attributes: ${model.attributes.edges}
  num_layers: 16
  num_chunks: 2
  mlp_extra_layers: 0
  cpu_offload: ${model.cpu_offload}

encoder:
  _target_: anemoi.models.layers.mapper.GNNForwardMapper
  trainable_size: ${model.trainable_parameters.data2hidden}
  sub_graph_edge_attributes: ${model.attributes.edges}
  activation: ${model.activation}
  num_chunks: 1
  mlp_extra_layers: 0
  cpu_offload: ${model.cpu_offload}

decoder:
  _target_: anemoi.models.layers.mapper.GNNBackwardMapper
  trainable_size: ${model.trainable_parameters.hidden2data}
  sub_graph_edge_attributes: ${model.attributes.edges}
  activation: ${model.activation}
  num_chunks: 1
  mlp_extra_layers: 0
  cpu_offload: ${model.cpu_offload}


trainable_parameters:
  data: 8
  hidden: 8
  data2hidden: 8
  hidden2data: 8
  hidden2hidden: 8

attributes:
  edges:
  - edge_length
  - edge_dirs
  nodes: []

# Bounding configuration
bounding: #These are applied in order

  # Bound total_precipitation with a Relu bounding layer
  # ensuring a range of [0, infinity) to avoid negative precipitation values.
  - _target_: anemoi.models.layers.bounding.ReluBounding #[0, infinity)
    variables:
    - total_precipitation

  # [OPTIONAL] Bound convective_precipitation as a fraction of total_precipitation.
  # This guarantees that convective_precipitation is physically consistent with total_precipitation by restricting convective_precipitation
  # to a fraction of total_precipitation [0 to 1]. Uncomment the lines below to apply.
  # NOTE: If this bounding strategy is used, the normalization of convective_precipitation must be
  # changed to "std" normalization, and the "convective_precipitation" statistics should be remapped
  # to those of total_precipitation to ensure consistency.

  # - _target_: anemoi.models.layers.bounding.FractionBounding # fraction of total_precipitation
  #   variables:
  #   - convective_precipitation
  #   min_val: 0
  #   max_val: 1
  #   total_var: total_precipitation

  # [OPTIONAL] NormalizedReluBounding
  # This is an extension of the Relu bounding in case the thrshold to be used
  # is not 0. For example, in case of the sea surface temperature we don't use
  # [0, infinity), buth rather [-2C, infinity). We do not want the water
  # temperature to be below the freezing temperature.

  # - _target_: anemoi.models.layers.bounding.NormalizedReluBounding
  #   variables: [sst]
  #   min_val: [-2]
  #   normalizer: ['mean-std']
